// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/open-edge-platform/cluster-connect-gateway/internal/auth"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/open-edge-platform/cluster-connect-gateway/api/v1alpha1"
)

// MockTokenManager is an autogenerated mock type for the TokenManager type
type MockTokenManager struct {
	mock.Mock
}

// CreateAndStoreToken provides a mock function with given fields: ctx, tunnelID, cc
func (_m *MockTokenManager) CreateAndStoreToken(ctx context.Context, tunnelID string, cc *v1alpha1.ClusterConnect) error {
	ret := _m.Called(ctx, tunnelID, cc)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndStoreToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1alpha1.ClusterConnect) error); ok {
		r0 = rf(ctx, tunnelID, cc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteToken provides a mock function with given fields: ctx, tunnelID
func (_m *MockTokenManager) DeleteToken(ctx context.Context, tunnelID string) error {
	ret := _m.Called(ctx, tunnelID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tunnelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetToken provides a mock function with given fields: ctx, tunnelID
func (_m *MockTokenManager) GetToken(ctx context.Context, tunnelID string) (*auth.Token, error) {
	ret := _m.Called(ctx, tunnelID)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 *auth.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.Token, error)); ok {
		return rf(ctx, tunnelID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Token); ok {
		r0 = rf(ctx, tunnelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tunnelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenExist provides a mock function with given fields: ctx, tunnelID
func (_m *MockTokenManager) TokenExist(ctx context.Context, tunnelID string) (bool, error) {
	ret := _m.Called(ctx, tunnelID)

	if len(ret) == 0 {
		panic("no return value specified for TokenExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, tunnelID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, tunnelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tunnelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTokenManager creates a new instance of MockTokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenManager {
	mock := &MockTokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
